# main.py
import geopandas as gpd
import subprocess
import sys
from pathlib import Path
import json
from utils import slugify
import os

# ---------- Helpers ----------
def choisir_massif():
    gdf_parks = gpd.read_file("data/input/PNR.geojson")
    massifs = sorted(gdf_parks["DRGP_L_LIB"].unique())
    print("Massifs disponibles :")
    for i, massif in enumerate(massifs, start=1):
        print(f"{i}. {massif}")
    choice = input("S√©lectionnez un massif (num√©ro ou nom) : ").strip()
    if choice.isdigit():
        idx = int(choice) - 1
        if 0 <= idx < len(massifs):
            return massifs[idx]
    elif choice in massifs:
        return choice
    print("‚ùå S√©lection invalide")
    sys.exit(1)

def choisir_ville():
    with open("data/input/gares_departs.json", "r", encoding="utf-8") as f:
        gares = json.load(f)
    villes = sorted(gares.keys())
    print("\nVilles de d√©part disponibles :")
    for i, ville in enumerate(villes, start=1):
        print(f"{i}. {ville}")
    choice = input("S√©lectionnez une ville (num√©ro ou nom) : ").strip()
    if choice.isdigit():
        idx = int(choice) - 1
        if 0 <= idx < len(villes):
            return villes[idx]
    elif choice in villes:
        return choice
    print("‚ùå S√©lection invalide")
    sys.exit(1)

def read_bbox_from_coord_max(massif):
    """Lit la bbox (lat_min, lng_min, lat_max, lng_max) depuis data/input/PNR_coord_max.geojson."""
    path = "data/input/PNR_coord_max.geojson"
    if not os.path.exists(path):
        return None
    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)
    for feat in data.get("features", []):
        props = feat.get("properties", {})
        nom = props.get("nom_pnr", "") or props.get("DRGP_L_LIB", "")
        if massif.lower() in nom.lower():
            # Certaines versions du GeoJSON ont ces noms de propri√©t√©
            lat_min = props.get("sud_lat_min") or props.get("south") or props.get("lat_min")
            lng_min = props.get("ouest_lng_min") or props.get("west") or props.get("lng_min")
            lat_max = props.get("nord_lat_max") or props.get("north") or props.get("lat_max")
            lng_max = props.get("est_lng_max") or props.get("east") or props.get("lng_max")
            if None in (lat_min, lng_min, lat_max, lng_max):
                return None
            return (float(lat_min), float(lng_min), float(lat_max), float(lng_max))
    return None

def estimate_poi_grid_count(bbox, pas_lat=0.005, pas_lng=0.005):
    if bbox is None:
        return None
    lat_min, lng_min, lat_max, lng_max = bbox
    # calcul approximatif du nombre de points dans la grille
    n_lat = int(((lat_max - lat_min) / pas_lat)) + 1
    n_lng = int(((lng_max - lng_min) / pas_lng)) + 1
    return max(0, n_lat * n_lng)

# ---------- Pipelines ----------
def pipeline_arrets(massif_name, ville_name, script_dir, start_step=0):
    """Pipeline arr√™ts : √©tapes 0..5 (Arrets_0 -> Arrets_5)."""
    slug_massif = slugify(massif_name)
    slug_ville = slugify(ville_name)

    steps = [
        ("Arrets_0_filtre.py", [massif_name]),
        ("Arrets_1_calcul_aller.py", [massif_name, ville_name]),
        ("Arrets_2_calcul_retour.py", [massif_name, ville_name]),
        ("Arrets_3_calcul_altitude.py", [massif_name, ville_name]),
        ("Arrets_4_calcul_distance.py", [massif_name, ville_name]),
        ("Arrets_5_normalisation.py", [massif_name, ville_name]),
    ]

    for i, (script_name, args) in enumerate(steps):
        if i < start_step:
            print(f"‚§∑ Skip √©tape {i} ({script_name})")
            continue

        script_path = script_dir / script_name

        # confirmations sp√©cifiques
        if script_name == "Arrets_1_calcul_aller.py":
            inter0_path = f"data/intermediate/{slug_massif}_arrets.geojson"
            if not os.path.exists(inter0_path):
                print(f"‚ùå Fichier introuvable : {inter0_path}")
                return
            gdf_inter0 = gpd.read_file(inter0_path)
            nb_appels_1 = len(gdf_inter0)
            confirm = input(f"\n‚ö†Ô∏è {nb_appels_1} requ√™tes vont √™tre envoy√©es √† l‚ÄôAPI Google (Arrets_1). Continuer ? [y/N] : ").strip().lower()
            if confirm != "y":
                print("‚ùå √âtape Arrets_1 annul√©e par l‚Äôutilisateur.")
                return

        if script_name == "Arrets_2_calcul_retour.py":
            inter_path = f"data/intermediate/{slug_massif}__{slug_ville}_arrets.geojson"
            if not os.path.exists(inter_path):
                print(f"‚ùå Fichier introuvable (n√©cessaire pour Arrets_2) : {inter_path}")
                return
            gdf_inter = gpd.read_file(inter_path)
            nb_appels_2 = len(gdf_inter)
            confirm = input(f"\n‚ö†Ô∏è Lancer le calcul retour (Google API) ? {nb_appels_2} appels n√©cessaires [y/N] : ").strip().lower()
            if confirm != "y":
                print("‚è≠Ô∏è √âtape Arrets_2_calcul_retour.py ignor√©e.")
                continue

        print(f"\n‚ñ∂Ô∏è Lancement {script_name} ...")
        try:
            subprocess.run([sys.executable, str(script_path), *args], check=True)
        except subprocess.CalledProcessError as e:
            print(f"‚ùå √âchec de {script_name} (exit {e.returncode})")
            raise

def pipeline_poi(massif_name, script_dir, start_step=0):
    """Pipeline POI : √©tapes 0..3 (POI_0_googlemaps, POI_1_OSM, POI_2_fusion, POI_3_scores)."""
    steps = [
        ("POI_0_googlemaps.py", [massif_name]),
        ("POI_1_OSM.py", [massif_name]),
        ("POI_2_fusion.py", [massif_name]),
        ("POI_3_scores.py", [massif_name]),
    ]

    for i, (script_name, args) in enumerate(steps):
        if i < start_step:
            print(f"‚§∑ Skip √©tape {i} ({script_name})")
            continue
        script_path = script_dir / script_name
        print(f"\n‚ñ∂Ô∏è Lancement {script_name} ...")
        try:
            subprocess.run([sys.executable, str(script_path), *args], check=True)
        except subprocess.CalledProcessError as e:
            print(f"‚ùå √âchec de {script_name} (exit {e.returncode})")
            raise

def pipeline_graphe(massif_name, ville_name, script_dir, start_step=0):
    """Pipeline graphe : √©tapes 0..2 (Graphe_0, Graphe_1_POI_fusion, Graphe_2_fichiers_finaux)."""
    steps = [
        ("Graphe_0.py", [massif_name]),
        ("Graphe_1_POI_fusion.py", [massif_name]),
        ("Graphe_2_fichiers_finaux.py", [massif_name, ville_name]),
    ]

    for i, (script_name, args) in enumerate(steps):
        if i < start_step:
            print(f"‚§∑ Skip √©tape {i} ({script_name})")
            continue
        script_path = script_dir / script_name
        print(f"\n‚ñ∂Ô∏è Lancement {script_name} ...")
        try:
            subprocess.run([sys.executable, str(script_path), *args], check=True)
        except subprocess.CalledProcessError as e:
            print(f"‚ùå √âchec de {script_name} (exit {e.returncode})")
            raise

# ---------- Main interactive ----------
def main():
    massif_name = choisir_massif()
    ville_name = choisir_ville()
    print(f"\nüëâ Massif s√©lectionn√© : {massif_name}")
    print(f"üëâ Ville de d√©part : {ville_name}")

    script_dir = Path(__file__).parent.resolve()

    print("\nQue souhaitez-vous calculer ?")
    print("1. Arr√™ts uniquement")
    print("2. POI uniquement")
    print("3. Paths / Graphe uniquement")
    print("4. Tout (Arr√™ts + POI + Graphe)")

    choice = input("Votre choix : ").strip()

    # demander √©tape de d√©part selon le choix
    if choice == "1":
        print("\n√âtapes pipeline Arr√™ts (num√©ro) :")
        print("0. Arrets_0_filtre.py")
        print("1. Arrets_1_calcul_aller.py")
        print("2. Arrets_2_calcul_retour.py")
        print("3. Arrets_3_calcul_altitude.py")
        print("4. Arrets_4_calcul_distance.py")
        print("5. Arrets_5_normalisation.py")
        start_input = input("√Ä partir de quelle √©tape voulez-vous reprendre ? (num√©ro, d√©faut=0) : ").strip()
        start_step = int(start_input) if start_input.isdigit() else 0
        pipeline_arrets(massif_name, ville_name, script_dir, start_step=start_step)

    elif choice == "2":
        print("\n√âtapes pipeline POI (num√©ro) :")
        print("0. POI_0_googlemaps.py")
        print("1. POI_1_OSM.py")
        print("2. POI_2_fusion.py")
        print("3. POI_3_scores.py")
        start_input = input("√Ä partir de quelle √©tape voulez-vous reprendre ? (num√©ro, d√©faut=0) : ").strip()
        start_step = int(start_input) if start_input.isdigit() else 0
        pipeline_poi(massif_name, script_dir, start_step=start_step)

    elif choice == "3":
        print("\n√âtapes pipeline Graphe (num√©ro) :")
        print("0. Graphe_0.py")
        print("1. Graphe_1_POI_fusion.py")
        print("2. Graphe_2_fichiers_finaux.py")
        start_input = input("√Ä partir de quelle √©tape voulez-vous reprendre ? (num√©ro, d√©faut=0) : ").strip()
        start_step = int(start_input) if start_input.isdigit() else 0
        pipeline_graphe(massif_name, ville_name, script_dir, start_step=start_step)

    elif choice == "4":
        # pour "Tout" on demande √©tape de d√©part pour chaque sous-pipeline
        print("\n--- Pipeline 'Tout' : pour chaque bloc choisissez l'√©tape de d√©part ---")
        print("\n[Arr√™ts] √©tapes 0..5 (d√©faut 0)")
        start_input = input("Arr√™ts : √©tape de d√©part (num√©ro, d√©faut=0) : ").strip()
        start_arrets = int(start_input) if start_input.isdigit() else 0

        print("\n[POI] √©tapes 0..3 (d√©faut 0)")
        start_input = input("POI : √©tape de d√©part (num√©ro, d√©faut=0) : ").strip()
        start_poi = int(start_input) if start_input.isdigit() else 0

        print("\n[Graphe] √©tapes 0..2 (d√©faut 0)")
        start_input = input("Graphe : √©tape de d√©part (num√©ro, d√©faut=0) : ").strip()
        start_graphe = int(start_input) if start_input.isdigit() else 0

        pipeline_arrets(massif_name, ville_name, script_dir, start_step=start_arrets)
        pipeline_poi(massif_name, script_dir, start_step=start_poi)
        pipeline_graphe(massif_name, ville_name, script_dir, start_step=start_graphe)

    else:
        print("‚ùå Choix invalide")

if __name__ == "__main__":
    main()
